{{define "main"}}
    <div class="content">
        <h1>Profile</h1>

        Hi, {{.Username}}!<br>
        <img src="{{default "/static/zuma.png" .AvatarURL}}" alt="avatar"
             title="{{if not .AvatarURL}}avatar missing, feels really weird man{{else}}a beautiful avatar{{end}}">
        <br>
        <br>

        <div class="horizontal-rule"></div>

        <h3>Notification preferences</h3>
        <p>Receive a discord notification when an event (comment) occurs on submissions to which you are subscribed.</p>

        <form class="pure-form pure-form-stacked" id="notification-form">
            <label for="notification-action">Comment
                <input type="checkbox" class="notification-action" value="comment"
                       {{if has "comment" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">Approve
                <input type="checkbox" class="notification-action" value="approve"
                       {{if has "approve" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">Request Changes
                <input type="checkbox" class="notification-action" value="request-changes"
                       {{if has "request-changes" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">Mark as Added + Freezer
                <input type="checkbox" class="notification-action" value="mark-added"
                       {{if has "mark-added" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">File upload
                <input type="checkbox" class="notification-action" value="upload-file"
                       {{if has "upload-file" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">Reject
                <input type="checkbox" class="notification-action" value="reject"
                       {{if has "reject" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">Get notified about every new audition upload
                <input type="checkbox" class="notification-action" value="audition-upload"
                       {{if has "audition-upload" .NotificationActions}}checked{{end}}></label>
            <label for="notification-action">Automatically subscribe to every new audition upload
                <input type="checkbox" class="notification-action" value="audition-subscribe"
                       {{if has "audition-subscribe" .NotificationActions}}checked{{end}}></label>
            <button type="button" onclick="updateNotificationSettings()" class="pure-button pure-button-primary">
                Update
            </button>
        </form>

        <div class="horizontal-rule"></div>

        <h3>Permissions</h3>
        {{if or (isTrialCurator .UserRoles) (or (isDecider .UserRoles) (isAdder .UserRoles))}}
            You have permissions to assign submissions to yourself.<br>
        {{end}}
        {{if isInAudit .UserRoles}}
            You have permissions to submit and interact with only one submission.<br>
        {{end}}
        {{if isStaff .UserRoles}}
            You are a staff member. You can see and interact with any submission.<br>
            You have permissions to modify game metadata.<br>
        {{end}}
        {{if isTrialCurator .UserRoles}}
            You are a Trial Curator. You can interact only with your own submissions.<br>
        {{end}}
        {{if isDeleter .UserRoles}}
            You have permissions to delete submissions, files and comments.<br>
            You have permissions to delete and restore games.<br>
            You have permissions to modify tags.<br>
        {{end}}
        {{if isDecider .UserRoles}}
            You have permissions to request changes or approve submissions.<br>
        {{end}}
        {{if isAdder .UserRoles}}
            You have permissions to mark submissions as added to Flashpoint.<br>
        {{end}}
        {{if isFreezer .UserRoles}}
            You have permissions to freeze submisisons.<br>
        {{end}}
        {{if isGod .UserRoles}}
            <b>You have permissions to access god tools.</b><br>
        {{end}}

        <div class="horizontal-rule"></div>

        <h3>Local settings</h3>
        <form class="pure-form pure-form-stacked" id="local-settings-form">
            <label for="site-max-width">Max site width</label>
            <input type="text" maxlength="5" id="site-max-width">
            <button type="button" onclick="updateLocalSettings()" class="pure-button pure-button-primary">
                Update
            </button>
        </form>

        <div class="horizontal-rule"></div>

        <h3>Sessions</h3>

        <div class="sessions">
            Fetching Sessions...
        </div>

        <div class="horizontal-rule"></div>

        <h3>Applications</h3>

        <div class="client-apps">
            Fetching Apps...
        </div>

        <script>
            async function generateAppSecret(clientId) {
                // Ask for user confirmation
                const isConfirmed = confirm("This will invalidate the old secret and you will have to update your application with the new secret. Are you sure you want to generate a new client secret?");
                if (!isConfirmed) {
                    return;
                }

                const res = await fetch("/api/profile/app/" + clientId + "/generate-secret", {
                    method: "POST"
                })
                if (res.status === 200) {
                    // Show secret in box
                    const data = await res.json()
                    const secret = data.secret
                    const secretCell = document.getElementById("client-secret")
                    secretCell.innerText = secret
                } else {
                    alert("Failed to generate secret.")
                }
            }

            async function fetchClientApps() {
                const res = await fetch("/api/profile/apps");
                const data = await res.json();
                const apps = data.apps;
                const appsDiv = document.querySelector(".client-apps");
                if (apps.length === 0) {
                    appsDiv.innerHTML = "You own no applications.";
                } else {
                    appsDiv.innerHTML = "";
                    for (const app of apps) {
                        const appDiv = document.createElement("div");
                        appDiv.classList.add("client-app");
                        appDiv.innerHTML = `
                            <table>
                                <tr>
                                    <td class="client-app-field-name">Name</th>
                                    <td>${app.name}</td>
                                </tr>
                                <tr>
                                    <td class="client-app-field-name">Client ID</th>
                                    <td>${app.client_id}</td>
                                </tr>
                                <tr>
                                    <td class="client-app-field-name">Client Secret</th>
                                    <td id="client-secret" >hidden</td>
                                </tr>
                                <tr>
                                    <td class="client-app-field-name">Scopes</th>
                                    <td>${app.scopes ? app.scopes.join(" ") : "None"}</td>
                                </tr>
                                <tr>
                                    <td class="client-app-field-name">Client Credential Scopes</th>
                                    <td>${app.client_creds_scopes ? app.client_creds_scopes.join(" ") : "None"}</td>
                                </tr>
                                <tr>
                                    <td class="client-app-field-name">Redirect URIs</th>
                                    <td>${app.redirect_uris ? app.redirect_uris.join(" ") : "None"}</td>
                                </tr>
                                <tr>
                                    <td>
                                        <button type="button" class="pure-button button-approve" onclick="generateAppSecret('${app.client_id}')">Regenerate Client Secret</button>
                                    </td>
                                </tr>
                            </table>
                        `;
                        appsDiv.appendChild(appDiv);
                    }
                }
            }

            async function deleteSession(sessionId) {
                const res = await fetch("/api/profile/session/" + sessionId, {
                    method: "DELETE"
                });
                if (res.status === 200) {
                    fetchSessions();
                } else {
                    alert("Failed to delete session.");
                }
            }

            async function fetchSessions() {
                const res = await fetch("/api/profile/sessions");
                const data = await res.json();
                const sessions = data.sessions;
                const sessionsDiv = document.querySelector(".sessions");
                sessionsDiv.innerHTML = "";
                for (const session of sessions) {
                    const sessionDiv = document.createElement("div")
                    sessionDiv.classList.add("session");
                    sessionDiv.innerHTML = `
                        <table>
                            <tr>
                                <td class="session-field-name">Client</th>
                                <td>${session.client}</td>
                            </tr>
                            <tr>
                                <td class="session-field-name">IP</th>
                                <td>${session.ip_addr}</td>
                            </tr>
                            <tr>
                                <td class="session-field-name">Scope</th>
                                <td>${session.scope}</td>
                            </tr>
                            <tr>
                                <td class="session-field-name">Expires at</th>
                                <td>${(new Date(session.expires_at * 1000)).toUTCString()}</td>
                            </tr>
                            <tr>
                                <td>
                                    <button type="button" class="pure-button button-delete" onclick="deleteSession('${session.id}')">Delete</button>
                                </td>
                            </tr>
                        </table>
                    `;
                    sessionsDiv.appendChild(sessionDiv);
                }
            }
            document.addEventListener("DOMContentLoaded", function() {
                fetchSessions();
                fetchClientApps();
            })
        </script>

        <script>
            let maxWidth = localStorage.getItem("site-max-width")
            if (maxWidth === null) {
                maxWidth = "1300"
            }
            document.getElementById("site-max-width").placeholder = maxWidth
            document.getElementById("site-max-width").value = ""
        </script>

    </div>
    </div>
{{end}}