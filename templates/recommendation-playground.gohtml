{{define "main"}}
    <div class="content">
        <h1>Recommendation Playground</h1>
        <h2>Similar Games</h2>

        Provide game UUID, number of recommendations you want and the model. The models differ by their size
        (complexity). The idea is that the bigger the model, the finer relation it can find in the data, if you have
        enough data.<br><br>

        <form id="similarGamesForm" class="pure-form" onsubmit="return false;">
            <input type="text" id="gameUUID" placeholder="Game UUID" list="gameUUIDList" size="40"><br>

            <input type="number" id="count" placeholder="Count" value="20" min="1" max="1000">

            <select id="modelSelector">
                <option value="v1-25">v1-25</option>
                <option value="v1-50">v1-50</option>
                <option value="v1-75">v1-75</option>
                <option value="v1-100" selected="selected">v1-100</option>
                <option value="v1-125">v1-125</option>
                <option value="v1-150">v1-150</option>
                <option value="v1-175">v1-175</option>
                <option value="v1-200">v1-200</option>
            </select>

            <button id="fetchRecommendations" class="pure-button pure-button-primary">Get Recommendations</button>
        </form>

        <h2>User recommendations</h2>

        Provide playcounts JSON (a dictionary of how many times has this hypothetical user played the games), number of recommendations you want and the model. The models differ by their size
        (complexity). The idea is that the bigger the model, the finer relation it can find in the data, if you have
        enough data.<br><br>

        If you want to extract your profile from your installed Flashpoint for testing this, <a href="/static/get_playcount_json.py">here is a python script</a> that will produce it, place it to the Data folder in Flashpoint where the flashpoint.sqlite database is, doesn't need any extra python packages to run.<br><br>

        Example playcounts JSON: {"1c616511-b47d-4d59-91ed-54ecdbaba294": 1, "c85ff4e3-1e2d-4b4e-8c4f-958d9db4aff2": 1}<br><br>

        <form id="userRecommendationsForm" class="pure-form" onsubmit="return false;">
            <textarea id="playcountsJSON" placeholder="Paste the whole JSON here" rows="4" cols="80"></textarea><br>

            <input type="number" id="count2" placeholder="Count" value="20" min="1" max="1000">

            <select id="modelSelector2">
                <option value="v1-25">v1-25</option>
                <option value="v1-50">v1-50</option>
                <option value="v1-75">v1-75</option>
                <option value="v1-100" selected="selected">v1-100</option>
                <option value="v1-125">v1-125</option>
                <option value="v1-150">v1-150</option>
                <option value="v1-175">v1-175</option>
                <option value="v1-200">v1-200</option>
            </select>

            <!-- Submit Button -->
            <button id="fetchUserRecommendations" class="pure-button pure-button-primary">Get Recommendations</button>
        </form>

        <br>
        <br>
        <br>

        <!-- Table for displaying similar games -->
        <div id="table-wrapper">
            <i>tip: use shift+mousewheel to scroll horizontally</i>
            <div id="table-scroll">
                <table id="similarGamesTable" class="pure-table pure-table-striped submissions-table">
                    <thead>
                    <tr>
                        <th>Score</th>
                        <th>UUID</th>
                        <th>Title
                        <th>
                    </tr>
                    </thead>
                    <tbody>
                    <!-- Recommendations will be added here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const fetchRecommendationsBtn = document.getElementById('fetchRecommendations');

            fetchRecommendationsBtn.addEventListener('click', function () {
                const gameUUID = document.getElementById('gameUUID').value;
                const count = document.getElementById('count').value;
                const model = document.getElementById('modelSelector').value;

                const requestData = {
                    model: model,
                    count: parseInt(count, 10),
                    uuid: gameUUID
                };

                fetch(`/api/recommendation/similar-games`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === "success") {
                            displayRecommendations(data.recommendations);
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            const fetchUserRecommendationsBtn = document.getElementById('fetchUserRecommendations');

            fetchUserRecommendationsBtn.addEventListener('click', function () {
                const playcountsJSON = document.getElementById('playcountsJSON').value;
                const count = document.getElementById('count2').value;
                const model = document.getElementById('modelSelector2').value;

                let playcounts;
                try {
                    playcounts = JSON.parse(playcountsJSON);
                } catch (error) {
                    alert('Invalid JSON format in Playcounts');
                    return;
                }

                const requestData = {
                    model: model,
                    count: parseInt(count, 10),
                    playcounts: playcounts
                };

                fetch(`/api/recommendation/user-recommendations`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === "success") {
                            displayRecommendations(data.recommendations);
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            function displayRecommendations(recommendations) {
                const tableBody = document.getElementById('similarGamesTable').getElementsByTagName('tbody')[0];
                tableBody.innerHTML = ''; // Clear existing rows

                recommendations.forEach(rec => {
                    let row = tableBody.insertRow();

                    let scoreCell = row.insertCell();
                    scoreCell.textContent = rec.score.toFixed(3);

                    let uuidCell = row.insertCell();
                    uuidCell.textContent = rec.uuid;

                    let titleCell = row.insertCell();
                    titleCell.textContent = rec.title;
                });
            }
        });
    </script>
{{end}}